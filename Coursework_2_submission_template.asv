% Jessica Jarvis
% egyjj6@nottingham.ac.uk


%% PRELIMINARY TASK - ARDUINO AND GIT INSTALLATION [10 MARKS]

for i = 1:10
    writeDigitalPin(a, 'D8', 1);   % Turn LED on
    pause(0.5);                    % Wait for 0.5 seconds
    writeDigitalPin(a, 'D8', 0);   % Turn LED off
    pause(0.5);                    % Wait for 0.5 seconds
end





%% TASK 1 - READ TEMPERATURE DATA, PLOT, AND WRITE TO A LOG FILE [20 MARKS]
%b) 

duration = 600; %total time (s)
timeData = zeros(1, duration);
voltageData = zeros(1, duration);
temperatureData = zeros(1, duration);

TC = 0.01; % volts per degree Celsius
V1 = 0.5;  % voltage at 0 °C

for t = 1:duration
    voltage = readVoltage(a, 'A1'); % read voltage from sensor
    voltageData(t) = voltage;
    temperature = (voltage - V1) / TC;
    temperatureData(t) = temperature;
    timeData(t) = t; % store time in seconds
    pause(1); % wait 1 second before next reading
end

%c)

plot(timeData, temperatureData); % plot temperature vs time
xlabel('Time (seconds)');        % x-axis label
ylabel('Temperature (°C)');      % y-axis label
title('Temperature Over Time');  % title

%d)

% data from graph
temperatureData = [28.69, 28.69, 28.69, 28.69, 28.20, 26.25, 27.71, 25.76, 25.76, 25.76, 25.76];

% Header information
dateStr = '5/3/2024';
locationStr = 'Nottingham';

% Start logging
fprintf('Data logging initiated - %s\n', dateStr);
fprintf('Location - %s\n\n', locationStr);

% Print each minute and temperature value
for i = 0:10
    fprintf('Minute\t\t%d\n', i);
    fprintf('Temperature \t%.2f C\n\n', temperatureData(i+1));
end

% Calculate values
maxTemp = max(temperatureData);
minTemp = min(temperatureData);
avgTemp = mean(temperatureData);

% Print values
fprintf('Max temp\t%.2f C\n', maxTemp);
fprintf('Min temp\t%.2f C\n', minTemp);
fprintf('Average temp\t%.2f C\n\n', avgTemp);

% End logging
fprintf('Data logging terminated\n');

%e)

% data from graph
temperatureData = [28.69, 28.69, 28.69, 28.69, 28.20, 26.25, 27.71, 25.76, 25.76, 25.76, 25.76];

% Info
dateStr = '5/3/2024';
locationStr = 'Nottingham';

% Open file for writing (creates file or checks if it exists)
fileID = fopen('cabin_temperature.txt', 'w');

% Write header
fprintf(fileID, 'Data logging initiated - %s\n', dateStr);
fprintf(fileID, 'Location - %s\n\n', locationStr);

% Write each data point
for i = 0:10
    fprintf(fileID, 'Minute\t\t%d\n', i);
    fprintf(fileID, 'Temperature \t%.2f C\n\n', temperatureData(i+1));
end

% Calculate values again
maxTemp = max(temperatureData);
minTemp = min(temperatureData);
avgTemp = mean(temperatureData);

fprintf(fileID, 'Max temp\t%.2f C\n', maxTemp);
fprintf(fileID, 'Min temp\t%.2f C\n', minTemp);
fprintf(fileID, 'Average temp\t%.2f C\n\n', avgTemp);

% End log
fprintf(fileID, 'Data logging terminated\n');

% Close the file
fclose(fileID);



%% TASK 2 - LED TEMPERATURE MONITORING DEVICE IMPLEMENTATION [25 MARKS]

% Insert answers here


%% TASK 3 - ALGORITHMS – TEMPERATURE PREDICTION [25 MARKS]

% Insert answers here


%% TASK 4 - REFLECTIVE STATEMENT [5 MARKS]

% Insert reflective statement here (400 words max)


%% TASK 5 - COMMENTING, VERSION CONTROL AND PROFESSIONAL PRACTICE [15 MARKS]

% No need to enter any answershere, but remember to:
% - Comment the code throughout.
% - Commit the changes to your git repository as you progress in your programming tasks.
% - Hand the Arduino project kit back to the lecturer with all parts and in working order.
